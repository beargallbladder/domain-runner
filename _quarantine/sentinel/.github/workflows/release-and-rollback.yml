name: Release & Rollback
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - release
          - rollback
      tag:
        description: 'Tag name (for release: new tag, for rollback: existing tag)'
        required: true
      message:
        description: 'Release message (for release only)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  execute-action:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for rollback
      
      - name: Validate inputs
        run: |
          if [[ "${{ inputs.action }}" == "release" ]]; then
            # Check tag doesn't already exist
            if git rev-parse "${{ inputs.tag }}" >/dev/null 2>&1; then
              echo "Error: Tag ${{ inputs.tag }} already exists"
              exit 1
            fi
          elif [[ "${{ inputs.action }}" == "rollback" ]]; then
            # Check tag exists
            if ! git rev-parse "${{ inputs.tag }}" >/dev/null 2>&1; then
              echo "Error: Tag ${{ inputs.tag }} does not exist"
              exit 1
            fi
          fi
      
      - name: Create Release
        if: inputs.action == 'release'
        run: |
          # Get latest run ID
          LATEST_RUN=$(ls -dt sentinel/runs/*/ | grep -v "dryrun\|manual" | head -1 | xargs basename)
          
          # Create annotated tag
          MESSAGE="${{ inputs.message }}"
          if [ -z "$MESSAGE" ]; then
            MESSAGE="Release from run ${LATEST_RUN}"
          fi
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "${{ inputs.tag }}" -m "$MESSAGE - Run: ${LATEST_RUN}"
          git push origin "${{ inputs.tag }}"
          
          echo "✅ Created release tag: ${{ inputs.tag }}"
          echo "Associated run: ${LATEST_RUN}"
      
      - name: Rollback to Tag
        if: inputs.action == 'rollback'
        env:
          RENDER_SERVICE_URL: ${{ vars.RENDER_SERVICE_URL }}
        run: |
          cd sentinel
          
          # Run rollback script
          bash scripts/rollback.sh "${{ inputs.tag }}"
          
          # Notify Render service about rollback
          RUN_ID=$(git log -1 --pretty=format:'%s' "${{ inputs.tag }}" | grep -oE '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}-[0-9]{2}Z' || echo "unknown")
          
          curl -X POST "${RENDER_SERVICE_URL}/api/internal/rollback" \
            -H "Content-Type: application/json" \
            -d "{\"tag\":\"${{ inputs.tag }}\",\"run_id\":\"${RUN_ID}\"}" || true
          
          echo "✅ Rolled back to tag: ${{ inputs.tag }}"
      
      - name: Create GitHub Release
        if: inputs.action == 'release'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ inputs.tag }}';
            const message = '${{ inputs.message }}' || `Sentinel Release ${tag}`;
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Sentinel ${tag}`,
              body: message,
              draft: false,
              prerelease: false
            });