name: Nightly Loop
on:
  schedule:
    - cron: '0 3 * * *'   # 03:00 UTC nightly
  workflow_dispatch:
    inputs:
      service_impl:
        description: 'Service implementation (node or rust)'
        required: false
        default: 'node'
        type: choice
        options:
          - node
          - rust

jobs:
  execute-loop:
    runs-on: ubuntu-latest
    environment: production  # Use GitHub environment for Render URL
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd sentinel
          npm ci --prefix services/runner-node || echo "Node deps pending"
          pip install -r scripts/requirements.txt
      
      - name: Call Render service to execute run
        env:
          RENDER_SERVICE_URL: ${{ vars.RENDER_SERVICE_URL }}
          SERVICE_IMPL: ${{ inputs.service_impl || 'node' }}
        run: |
          export RUN_ID=$(date -u +'%Y-%m-%dT%H-%MZ')
          
          # Since keys are on Render, trigger the run via Render API
          echo "Triggering Sentinel run on Render service..."
          
          curl -X POST "${RENDER_SERVICE_URL}/api/internal/trigger-run" \
            -H "Content-Type: application/json" \
            -d "{\"run_id\":\"${RUN_ID}\",\"service_impl\":\"${SERVICE_IMPL}\"}" \
            -o sentinel/runs/${RUN_ID}/trigger_response.json || true
          
          # If RuvNet CLI is available locally, run coordination
          if command -v ruvnet &> /dev/null; then
            cd sentinel
            ruvnet run orchestration/ruvnet/hive.yml --run-id $RUN_ID
          else
            echo "RuvNet CLI not found, run triggered on Render"
          fi
      
      - name: Wait for run completion
        run: |
          # Poll Render service for run status
          for i in {1..60}; do
            sleep 10
            STATUS=$(curl -s "${RENDER_SERVICE_URL}/api/internal/runs/${RUN_ID}/status" | jq -r '.status')
            echo "Run status: $STATUS"
            if [[ "$STATUS" == "completed" || "$STATUS" == "failed" ]]; then
              break
            fi
          done
      
      - name: Download run artifacts
        run: |
          cd sentinel
          # Download artifacts from Render
          curl -s "${RENDER_SERVICE_URL}/api/internal/runs/${RUN_ID}/artifacts" \
            -o runs/${RUN_ID}/artifacts.tar.gz
          tar -xzf runs/${RUN_ID}/artifacts.tar.gz -C runs/${RUN_ID}/
      
      - name: Diff vs previous run
        run: |
          cd sentinel
          PREVIOUS=$(ls -dt runs/*/ | grep -v "dryrun" | sed -n '2p')
          if [ ! -z "$PREVIOUS" ]; then
            python scripts/diff_runs.py --current runs/${RUN_ID} --previous $PREVIOUS
          fi
      
      - name: Auto-propose spec tweaks
        id: propose
        run: |
          cd sentinel
          python scripts/propose_spec_update.py \
            --from-runs runs/${RUN_ID} \
            --spec specs/sentinel.prd.md \
            --mode low-risk
          
          # Check if files changed
          if git diff --quiet specs/sentinel.prd.md; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.propose.outputs.no_changes == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Auto-tune Sentinel parameters from run ${{ env.RUN_ID }}"
          title: "ðŸ¤– Sentinel: Auto-tuned parameters from nightly run"
          body: |
            ## Auto-tuned Parameters
            
            This PR contains automatically proposed parameter adjustments based on the nightly run.
            
            **Run ID**: ${{ env.RUN_ID }}
            **Mode**: low-risk
            
            Only safe parameters have been adjusted:
            - timeout_ms
            - retry_count
            - batch_size
            - parallel_workers
            - cache_ttl_seconds
            
            Please review the changes before merging.
          branch: auto-tune/${{ env.RUN_ID }}
          delete-branch: true