name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18.x'
  DEPLOY_TIMEOUT: 600

jobs:
  # Code quality and security checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type checking
        run: npm run type-check
        
      - name: Security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        service:
          - sophisticated-runner
          - domain-runner
          - seo-metrics-runner
          - cohort-intelligence
          - industry-intelligence
          - news-correlation-service
          - swarm-intelligence
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd services/${{ matrix.service }} && npm ci
      
      - name: Run unit tests
        run: |
          cd services/${{ matrix.service }}
          npm test -- --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: services/${{ matrix.service }}/coverage
          flags: ${{ matrix.service }}

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: domain_runner_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/domain_runner_test
        run: npm run db:migrate
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgres://test:test@localhost:5432/domain_runner_test
          NODE_ENV: test
        run: npm run test:integration

  # Load tests
  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run load tests
        run: npm run test:load
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: test-results/load-tests/

  # Build artifacts
  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        service:
          - sophisticated-runner
          - domain-runner
          - seo-metrics-runner
          - cohort-intelligence
          - industry-intelligence
          - news-correlation-service
          - swarm-intelligence
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install and build
        run: |
          cd services/${{ matrix.service }}
          npm ci
          npm run build
      
      - name: Create deployment package
        run: |
          cd services/${{ matrix.service }}
          tar -czf ../../${{ matrix.service }}-${{ github.sha }}.tar.gz \
            dist/ \
            package.json \
            package-lock.json
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ${{ matrix.service }}-${{ github.sha }}.tar.gz

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, load-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.domain-runner.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Deploy to staging
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DEPLOY_ENV: staging
        run: |
          chmod +x infrastructure/deploy-production.sh
          ./infrastructure/deploy-production.sh
      
      - name: Run smoke tests
        run: |
          sleep 60  # Wait for services to stabilize
          npm run test:smoke:staging

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://sophisticated-runner.onrender.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Backup current production
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Creating production backup..."
          pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql
      
      - name: Deploy to production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          OPENAI_API_KEYS: ${{ secrets.OPENAI_API_KEYS }}
          ANTHROPIC_API_KEYS: ${{ secrets.ANTHROPIC_API_KEYS }}
          DEEPSEEK_API_KEYS: ${{ secrets.DEEPSEEK_API_KEYS }}
          MISTRAL_API_KEYS: ${{ secrets.MISTRAL_API_KEYS }}
          XAI_API_KEYS: ${{ secrets.XAI_API_KEYS }}
          TOGETHER_API_KEYS: ${{ secrets.TOGETHER_API_KEYS }}
          PERPLEXITY_API_KEYS: ${{ secrets.PERPLEXITY_API_KEYS }}
          GOOGLE_API_KEYS: ${{ secrets.GOOGLE_API_KEYS }}
          COHERE_API_KEYS: ${{ secrets.COHERE_API_KEYS }}
          AI21_API_KEYS: ${{ secrets.AI21_API_KEYS }}
          GROQ_API_KEYS: ${{ secrets.GROQ_API_KEYS }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          DEPLOY_ENV: production
        run: |
          chmod +x infrastructure/deploy-production.sh
          ./infrastructure/deploy-production.sh
      
      - name: Verify deployment
        run: |
          sleep 60  # Wait for services to stabilize
          npm run test:smoke:production
      
      - name: Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'Production deployment successful! ðŸŽ‰'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Rollback on failure
        if: failure()
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          echo "Deployment failed, initiating rollback..."
          ./infrastructure/rollback.sh

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Monitor deployment health
        run: |
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            
            # Check all critical endpoints
            curl -f https://sophisticated-runner.onrender.com/health || exit 1
            curl -f https://domain-runner.onrender.com/health || exit 1
            curl -f https://llmrank.io/health || exit 1
            
            sleep 30
          done
      
      - name: Run production tests
        run: npm run test:production
      
      - name: Generate deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "Date: $(date)" >> deployment-report.md
          echo "Commit: ${{ github.sha }}" >> deployment-report.md
          echo "Author: ${{ github.actor }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Services Deployed" >> deployment-report.md
          echo "- sophisticated-runner" >> deployment-report.md
          echo "- domain-runner" >> deployment-report.md
          echo "- llmrank-api" >> deployment-report.md
          echo "- seo-metrics-runner" >> deployment-report.md
          echo "- cohort-intelligence" >> deployment-report.md
          echo "- industry-intelligence" >> deployment-report.md
          echo "- news-correlation-service" >> deployment-report.md
          echo "- swarm-intelligence" >> deployment-report.md
      
      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md