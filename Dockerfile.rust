# Multi-stage build for minimal final image
# Stage 1: Builder
FROM rust:1.75 as builder

WORKDIR /app

# Copy manifests
COPY Cargo.toml Cargo.lock ./

# Create dummy main to cache dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    echo "pub fn dummy() {}" > src/lib.rs

# Build dependencies only
RUN cargo build --release && \
    rm -rf src

# Copy real source code
COPY src ./src
COPY migrations ./migrations

# Build the actual binaries
RUN touch src/main.rs src/lib.rs && \
    cargo build --release --bin web --bin worker

# Stage 2: Runtime
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy binaries from builder
COPY --from=builder /app/target/release/web /usr/local/bin/web
COPY --from=builder /app/target/release/worker /usr/local/bin/worker

# Copy migrations
COPY --from=builder /app/migrations ./migrations

# Set environment variables
ENV RUST_LOG=info
ENV PORT=8080

# SAFETY: Default to read-only mode in production
ENV DB_READONLY=true
ENV FEATURE_WRITE_DRIFT=false
ENV FEATURE_CRON=false
ENV FEATURE_WORKER_WRITES=false

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/healthz || exit 1

# Expose port
EXPOSE 8080

# Default to web service
CMD ["web"]