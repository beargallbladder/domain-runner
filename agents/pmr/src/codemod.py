"""
Codemod for updating providers.generated.yml based on PMR proposals.
Generates canonical provider configuration from registry and contracts.
"""

import json
import yaml
import os
import datetime
from typing import Dict, List, Optional

def generate_providers_config(
    registry: List[Dict],
    contracts: List[Dict],
    proposals: List[Dict]
) -> Dict:
    """
    Generate providers.generated.yml content from registry, contracts, and proposals.

    This is the authoritative source for provider configuration.
    """
    config = {
        "generated_at": datetime.datetime.utcnow().isoformat() + "Z",
        "generator": "PMR v1.0",
        "providers": {}
    }

    # Create lookups
    contract_by_key = {}
    for c in contracts:
        key = f"{c['provider']}/{c['model']}"
        contract_by_key[key] = c

    proposal_by_key = {}
    for p in proposals:
        key = f"{p['provider']}/{p['model']}"
        proposal_by_key[key] = p

    # Process each provider
    for r in registry:
        provider = r["provider"]
        model = r["model"]
        key = f"{provider}/{model}"

        contract = contract_by_key.get(key, {})
        proposal = proposal_by_key.get(key)

        # Skip if there's a deprecate/remove proposal
        if proposal and proposal["action"] in ["deprecate", "remove"]:
            continue

        # Skip if contract failed for active model
        if r["status"] == "active" and contract.get("contract_ok") is False:
            continue

        # Skip deprecated/eol models
        if r["status"] in ["deprecated", "eol"]:
            continue

        # Add to config
        if provider not in config["providers"]:
            config["providers"][provider] = {
                "models": {},
                "endpoint": r.get("endpoint", ""),
                "api_key_env": f"{provider.upper()}_API_KEY"
            }

        model_config = {
            "status": r["status"],
            "params": r.get("params", {}),
            "capabilities": r.get("capabilities", {}),
            "contract_ok": contract.get("contract_ok", None),
            "last_validated": contract.get("canary_timestamp", r.get("last_checked_iso"))
        }

        # Add proposal info if exists
        if proposal:
            model_config["proposal"] = {
                "action": proposal["action"],
                "reason": proposal["reason"],
                "impact": proposal["impact"]
            }

        config["providers"][provider]["models"][model] = model_config

    return config

def update_runtime_suggestions(
    current_runtime: Dict,
    proposals: List[Dict]
) -> Dict:
    """
    Generate suggested updates to runtime.yml based on proposals.

    Returns a new runtime config with proposed changes applied.
    """
    suggested = json.loads(json.dumps(current_runtime))  # Deep copy

    for p in proposals:
        provider = p["provider"]
        model = p["model"]

        if provider not in suggested.get("providers", {}):
            continue

        if p["action"] == "deprecate":
            # Disable deprecated models
            if suggested["providers"][provider].get("model") == model:
                suggested["providers"][provider]["enabled"] = False
                suggested["providers"][provider]["_deprecation_notice"] = p["reason"]

        elif p["action"] == "upgrade":
            # Suggest replacement model
            evidence = p.get("evidence", {})
            replacement = evidence.get("replacement", {})
            if replacement:
                suggested["providers"][provider]["model"] = replacement["model"]
                suggested["providers"][provider]["_upgrade_notice"] = f"Upgraded from {model}"

        elif p["action"] == "add":
            # Enable new high-value models
            if not suggested["providers"][provider].get("enabled"):
                suggested["providers"][provider]["enabled"] = True
                suggested["providers"][provider]["model"] = model
                suggested["providers"][provider]["_addition_notice"] = p["reason"]

    return suggested

def save_generated_config(config: Dict, output_path: str = "config/providers.generated.yml"):
    """Save generated provider configuration."""
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # Add header comment
    header = """# GENERATED FILE - DO NOT EDIT
# This file is automatically generated by PMR (Provider & Model Registry)
# Last generated: {}
# Source: agents/pmr/src/codemod.py
#
# To update: python -m agents.pmr.src.codemod
""".format(config["generated_at"])

    with open(output_path, 'w') as f:
        f.write(header)
        yaml.dump(config, f, default_flow_style=False, sort_keys=False)

    print(f"[PMR Codemod] Generated config saved to {output_path}")

def generate_pr_description(proposals: List[Dict]) -> str:
    """Generate PR description for proposed changes."""
    lines = ["# Provider & Model Registry Updates\n"]
    lines.append("## Summary\n")

    by_action = {}
    for p in proposals:
        action = p["action"]
        by_action[action] = by_action.get(action, [])
        by_action[action].append(p)

    for action, props in by_action.items():
        lines.append(f"\n### {action.capitalize()} ({len(props)} models)\n")
        for p in props:
            impact = p["impact"]
            lines.append(f"- **{p['provider']}/{p['model']}**")
            lines.append(f"  - Reason: {p['reason']}")
            lines.append(f"  - Impact: ΔMII={impact['delta_mii']:.1f}, ΔBudget=${impact['budget_delta']:.2f}/hr")

    lines.append("\n## Evidence\n")
    lines.append("- Registry last updated: " + datetime.datetime.utcnow().isoformat())
    lines.append("- Contract tests passed: See `artifacts/contract_results.json`")
    lines.append("- Proposals reviewed: See `artifacts/pmr_proposals.json`")

    return "\n".join(lines)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="PMR Codemod")
    parser.add_argument("--registry", default="artifacts/provider_registry.json")
    parser.add_argument("--contracts", default="artifacts/contract_results.json")
    parser.add_argument("--proposals", default="artifacts/pmr_proposals.json")
    parser.add_argument("--update", default="config/providers.generated.yml", help="Update generated config")
    parser.add_argument("--suggest", default="config/runtime.yml", help="Suggest runtime.yml changes")
    parser.add_argument("--pr", action="store_true", help="Generate PR description")
    args = parser.parse_args()

    # Load inputs
    with open(args.registry) as f:
        registry = json.load(f)

    with open(args.contracts) as f:
        contracts = json.load(f)

    with open(args.proposals) as f:
        proposals = json.load(f)

    # Generate providers.generated.yml
    config = generate_providers_config(registry, contracts, proposals)
    save_generated_config(config, args.update)

    # Suggest runtime.yml changes if requested
    if args.suggest and os.path.exists(args.suggest):
        with open(args.suggest) as f:
            current_runtime = yaml.safe_load(f)

        suggested = update_runtime_suggestions(current_runtime, proposals)

        # Save suggestions
        suggest_path = args.suggest.replace(".yml", ".suggested.yml")
        with open(suggest_path, 'w') as f:
            yaml.dump(suggested, f, default_flow_style=False)
        print(f"[PMR Codemod] Suggestions saved to {suggest_path}")

    # Generate PR description if requested
    if args.pr and proposals:
        pr_desc = generate_pr_description(proposals)
        pr_path = "artifacts/pmr_pr_description.md"
        with open(pr_path, 'w') as f:
            f.write(pr_desc)
        print(f"[PMR Codemod] PR description saved to {pr_path}")