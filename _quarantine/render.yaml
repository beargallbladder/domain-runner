services:
  # Frontend Placeholder (actual frontend hosted elsewhere)
  - type: web
    name: llm-pagerank-frontend
    env: static
    plan: starter
    buildCommand: echo "Frontend is hosted externally - this is just a placeholder"
    staticPublishPath: ./public
    rootDir: .
    envVars:
      - key: VITE_API_BASE_URL
        value: https://llmrank.io
      - key: NODE_ENV
        value: production
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: Referrer-Policy
        value: strict-origin-when-cross-origin
      - path: /*
        name: X-XSS-Protection
        value: "1; mode=block"
      - path: /*
        name: Strict-Transport-Security
        value: "max-age=31536000; includeSubDomains"
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    autoDeploy: true
    branch: main
    region: oregon

  # SEO Metrics Runner Service
  - type: web
    name: seo-metrics-runner
    runtime: node
    plan: starter
    buildCommand: npm cache clean --force && npm install && npm run build
    startCommand: npm run start:graceful
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: seo-metrics-runner
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: REDIS_URL
        fromRedis:
          name: domain-runner-redis
          property: connectionString
      - key: CACHE_TTL
        value: "3600"
      - key: RATE_LIMIT_RPM
        value: "1000"
    healthCheckPath: /health
    rootDir: services/seo-metrics-runner
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Domain Processor v2 Service
  - type: web
    name: domain-processor-v2
    runtime: node
    plan: starter
    buildCommand: cd services/domain-processor-v2 && npm cache clean --force && npm install && npm run build
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: domain-processor-v2
      - key: LOG_LEVEL
        value: info
      - key: PORT
        value: "3003"
      - key: QUEUE_CONCURRENCY
        value: "30"
      - key: QUEUE_BATCH_SIZE
        value: "50"
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: REDIS_URL
        fromRedis:
          name: domain-runner-redis
          property: connectionString
      # API Keys - Production environment variables
      - key: OPENAI_API_KEY
        sync: false
      - key: OPENAI_API_KEY_2
        sync: false
      - key: OPENAI_API_KEY_3
        sync: false
      - key: OPENAI_API_KEY_4
        sync: false
      - key: ANTHROPIC_API_KEY
        sync: false
      - key: ANTHROPIC_API_KEY_2
        sync: false
      - key: DEEPSEEK_API_KEY
        sync: false
      - key: DEEPSEEK_API_KEY_2
        sync: false
      - key: DEEPSEEK_API_KEY_3
        sync: false
      - key: MISTRAL_API_KEY
        sync: false
      - key: MISTRAL_API_KEY_2
        sync: false
      - key: XAI_API_KEY
        sync: false
      - key: XAI_API_KEY_2
        sync: false
      - key: TOGETHER_API_KEY
        sync: false
      - key: TOGETHER_API_KEY_2
        sync: false
      - key: TOGETHER_API_KEY_3
        sync: false
      - key: PERPLEXITY_API_KEY
        sync: false
      - key: PERPLEXITY_API_KEY_2
        sync: false
      - key: GOOGLE_API_KEY
        sync: false
      - key: GOOGLE_API_KEY_2
      # Missing LLM Provider Keys (CRITICAL for tensor integrity)
      - key: COHERE_API_KEY
        sync: false
      - key: COHERE_API_KEY_2
        sync: false
      - key: AI21_API_KEY
        sync: false
      - key: AI21_API_KEY_2
        sync: false
      - key: GROQ_API_KEY
        sync: false
      - key: GROQ_API_KEY_2
        sync: false
        sync: false
    healthCheckPath: /api/v2/health
    rootDir: .
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Sophisticated Runner Service - Node.js with Provider Validation
  - type: web
    name: sophisticated-runner
    runtime: node
    plan: starter
    buildCommand: npm cache clean --force && npm install && npm run build
    startCommand: npm start
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: sophisticated-runner
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      # All LLM API Keys with flexible formats
      - key: OPENAI_API_KEY
        sync: false
      - key: OPENAI_API_KEY_2
        sync: false
      - key: OPENAI_API_KEY_3
        sync: false
      - key: OPENAI_API_KEY_4
        sync: false
      - key: ANTHROPIC_API_KEY
        sync: false
      - key: ANTHROPIC_API_KEY_2
        sync: false
      - key: ANTHROPIC_API_KEY2
        sync: false
      - key: DEEPSEEK_API_KEY
        sync: false
      - key: DEEPSEEK_API_KEY_2
        sync: false
      - key: DEEPSEEK_API_KEY2
        sync: false
      - key: MISTRAL_API_KEY
        sync: false
      - key: MISTRAL_API_KEY_2
        sync: false
      - key: XAI_API_KEY
        sync: false
      - key: XAI_API_KEY_2
        sync: false
      - key: XAI_API_KEY2
        sync: false
      - key: TOGETHER_API_KEY
        sync: false
      - key: TOGETHER_API_KEY_2
        sync: false
      - key: TOGETHER_API_KEY2
        sync: false
      - key: PERPLEXITY_API_KEY
        sync: false
      - key: PERPLEXITY_API_KEY_1
        sync: false
      - key: PERPLEXITY_API_KEY_2
        sync: false
      - key: PERPLEXITY_API_KEY2
        sync: false
      - key: GOOGLE_API_KEY
        sync: false
      - key: GOOGLE_API_KEY_2
        sync: false
      - key: GOOGLE_API_KEY2
        sync: false
      - key: COHERE_API_KEY
        sync: false
      - key: COHERE_API_KEY_1
        sync: false
      - key: COHERE_API_KEY_2
        sync: false
      - key: COHERE_API_KEY2
        sync: false
      - key: AI21_API_KEY
        sync: false
      - key: AI21_API_KEY_1
        sync: false
      - key: AI21_API_KEY_2
        sync: false
      - key: GROQ_API_KEY
        sync: false
      - key: GROQ_API_KEY_1
        sync: false
      - key: GROQ_API_KEY_2
        sync: false
      - key: GROQ_API_KEY2
        sync: false
    healthCheckPath: /health
    rootDir: services/sophisticated-runner
    autoDeploy: true
    branch: main
    region: oregon

  # Public API Service (Primary Domain)
  - type: web
    name: llm-pagerank-public-api
    env: python
    plan: starter
    buildCommand: "pip cache purge && pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt && echo 'SECURITY-BUILD-$(date +%s)'"
    startCommand: "uvicorn production_api:app --host 0.0.0.0 --port $PORT --workers 2 --access-log --log-level info"
    envVars:
      - key: ENVIRONMENT
        value: production
      - key: SERVICE_NAME
        value: llm-pagerank-public-api
      - key: LOG_LEVEL
        value: INFO
      - key: PORT
        value: "8000"
      - key: WORKERS
        value: "2"
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: REDIS_URL
        fromRedis:
          name: domain-runner-redis
          property: connectionString
      - key: CACHE_TTL
        value: "1800"
      - key: MAX_CONNECTIONS
        value: "15"
      - key: MIN_CONNECTIONS
        value: "5"
      - key: CONNECTION_TIMEOUT
        value: "10"
    healthCheckPath: /health
    domains:
      - llmrank.io
    rootDir: services/public-api
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 2

  # Public API Service (Onrender subdomain)
  - type: web
    name: public-api-service
    env: python
    plan: starter
    buildCommand: "pip cache purge && pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt && echo 'SECURITY-BUILD-$(date +%s)'"
    startCommand: "uvicorn production_api:app --host 0.0.0.0 --port $PORT --workers 2 --access-log --log-level info"
    envVars:
      - key: ENVIRONMENT
        value: production
      - key: SERVICE_NAME
        value: public-api-service
      - key: LOG_LEVEL
        value: INFO
      - key: PORT
        value: "8000"
      - key: WORKERS
        value: "2"
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: REDIS_URL
        fromRedis:
          name: domain-runner-redis
          property: connectionString
      - key: CACHE_TTL
        value: "1800"
      - key: MAX_CONNECTIONS
        value: "15"
      - key: MIN_CONNECTIONS
        value: "5"
      - key: CONNECTION_TIMEOUT
        value: "10"
    healthCheckPath: /health
    rootDir: services/public-api
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Cohort Intelligence Service
  - type: web
    name: cohort-intelligence
    runtime: node
    plan: starter
    buildCommand: cd services/cohort-intelligence && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: cohort-intelligence
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: CACHE_TTL
        value: "7200"
      - key: ANALYSIS_DEPTH
        value: comprehensive
    healthCheckPath: /health
    rootDir: services/cohort-intelligence
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Industry Intelligence Service
  - type: web
    name: industry-intelligence
    runtime: node
    plan: starter
    buildCommand: cd services/industry-intelligence && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: industry-intelligence
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: BENCHMARK_MODE
        value: tesla_jolt
      - key: INDUSTRY_FOCUS
        value: automotive_tech
    healthCheckPath: /health
    rootDir: services/industry-intelligence
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # News Correlation Service
  - type: web
    name: news-correlation-service
    runtime: node
    plan: starter
    buildCommand: cd services/news-correlation-service && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: news-correlation-service
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: NEWS_API_KEY
        sync: false
      - key: CORRELATION_THRESHOLD
        value: "0.7"
      - key: TESLA_MONITORING
        value: "true"
    healthCheckPath: /health
    rootDir: services/news-correlation-service
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Swarm Intelligence Service
  - type: web
    name: swarm-intelligence
    runtime: node
    plan: starter
    buildCommand: cd services/swarm-intelligence && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: swarm-intelligence
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: SWARM_MODE
        value: distributed
      - key: COORDINATION_INTERVAL
        value: "300"
      - key: MAX_AGENTS
        value: "10"
      - key: AGENT_MEMORY_LIMIT
        value: "512"
    healthCheckPath: /health
    rootDir: services/swarm-intelligence
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Memory Oracle Service
  - type: web
    name: memory-oracle
    runtime: node
    plan: starter
    buildCommand: cd services/memory-oracle && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: memory-oracle
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: MEMORY_DEPTH
        value: "90"
      - key: PREDICTION_HORIZON
        value: "30"
      - key: CACHE_TTL
        value: "86400"
    healthCheckPath: /health
    rootDir: services/memory-oracle
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Weekly Scheduler Service
  - type: web
    name: weekly-scheduler
    runtime: node
    plan: starter
    buildCommand: cd services/weekly-scheduler && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: weekly-scheduler
      - key: LOG_LEVEL
        value: info
      - key: PORT
        value: "3010"
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      # Scheduling configuration
      - key: WEEKLY_SCHEDULE
        value: "0 0 * * 0"  # Sunday at midnight
      - key: DAILY_SCHEDULE
        value: "0 2 * * *"  # 2 AM daily
      - key: HOURLY_SCHEDULE
        value: "0 * * * *"  # Every hour
      - key: WEEKLY_ENABLED
        value: "true"
      - key: DAILY_ENABLED
        value: "false"
      - key: HOURLY_ENABLED
        value: "false"
      # Target service URLs
      - key: SOPHISTICATED_RUNNER_URL
        value: https://domain-runner.onrender.com
      - key: PUBLIC_API_URL
        value: https://llmrank.io
      # Notifications (optional)
      - key: SLACK_WEBHOOK_URL
        sync: false
      - key: ALERT_EMAIL_RECIPIENTS
        value: ""
      - key: ALERT_ON_SUCCESS
        value: "false"
    healthCheckPath: /health
    rootDir: services/weekly-scheduler
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Visceral Intelligence Service
  - type: web
    name: visceral-intelligence
    runtime: node
    plan: starter
    buildCommand: cd services/visceral-intelligence && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: visceral-intelligence
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: COMPETITIVE_MODE
        value: aggressive
      - key: MARKET_SENTIMENT_DEPTH
        value: comprehensive
      - key: VIRAL_THRESHOLD
        value: "0.8"
    healthCheckPath: /health
    rootDir: services/visceral-intelligence
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Reality Validator Service
  - type: web
    name: reality-validator
    runtime: node
    plan: starter
    buildCommand: cd services/reality-validator && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: reality-validator
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: VALIDATION_THRESHOLD
        value: "0.75"
      - key: DATA_SOURCE_PRIORITY
        value: business,financial,market
      - key: CACHE_TTL
        value: "3600"
    healthCheckPath: /health
    rootDir: services/reality-validator
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Predictive Analytics Service
  - type: web
    name: predictive-analytics
    runtime: node
    plan: starter
    buildCommand: cd services/predictive-analytics && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: predictive-analytics
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: PREDICTION_MODELS
        value: trajectory,disruption,market,threat
      - key: CONFIDENCE_THRESHOLD
        value: "0.7"
      - key: TEMPORAL_WINDOW
        value: "180"
      - key: JOLT_INTEGRATION
        value: "true"
    healthCheckPath: /health
    rootDir: services/predictive-analytics
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Embedding Engine Service
  - type: web
    name: embedding-engine
    env: python
    plan: starter
    buildCommand: pip install --upgrade pip && pip install -r requirements.txt
    startCommand: uvicorn embedding_runner:app --host 0.0.0.0 --port $PORT --workers 2
    envVars:
      - key: ENVIRONMENT
        value: production
      - key: SERVICE_NAME
        value: embedding-engine
      - key: LOG_LEVEL
        value: INFO
      - key: PORT
        value: "8001"
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: REDIS_URL
        fromRedis:
          name: domain-runner-redis
          property: connectionString
      - key: OPENAI_API_KEY
        sync: false
      - key: BATCH_SIZE
        value: "100"
      - key: EMBEDDING_MODEL
        value: text-embedding-3-small
      - key: CACHE_TTL
        value: "86400"
    healthCheckPath: /health
    rootDir: services/embedding-engine
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Database Manager Service
  - type: web
    name: database-manager
    runtime: node
    plan: starter
    buildCommand: cd services/database-manager && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: database-manager
      - key: LOG_LEVEL
        value: info
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: MAINTENANCE_WINDOW
        value: "02:00-04:00"
      - key: BACKUP_RETENTION_DAYS
        value: "30"
      - key: VACUUM_INTERVAL
        value: "weekly"
    healthCheckPath: /health
    rootDir: services/database-manager
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

  # Monitoring Dashboard Service
  - type: web
    name: monitoring-dashboard
    runtime: node
    plan: starter
    buildCommand: cd services/monitoring-dashboard && npm cache clean --force && npm install && npm run build
    startCommand: node dist/index.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: SERVICE_NAME
        value: monitoring-dashboard
      - key: LOG_LEVEL
        value: info
      - key: PORT
        value: "3020"
      - key: DATABASE_URL
        fromDatabase:
          name: raw-capture-db
          property: connectionString
      - key: ALLOWED_ORIGINS
        value: "https://llmrank.io,https://dashboard.llmrank.io"
      # Service URLs for monitoring
      - key: SOPHISTICATED_RUNNER_URL
        value: https://domain-runner.onrender.com
      - key: DOMAIN_PROCESSOR_V2_URL
        value: https://domain-processor-v2.onrender.com
      - key: PUBLIC_API_URL
        value: https://llmrank.io
      - key: SEO_METRICS_URL
        value: https://seo-metrics-runner.onrender.com
      - key: COHORT_INTELLIGENCE_URL
        value: https://cohort-intelligence.onrender.com
      - key: INDUSTRY_INTELLIGENCE_URL
        value: https://industry-intelligence.onrender.com
      - key: NEWS_CORRELATION_URL
        value: https://news-correlation-service.onrender.com
      - key: SWARM_INTELLIGENCE_URL
        value: https://swarm-intelligence.onrender.com
      - key: MEMORY_ORACLE_URL
        value: https://memory-oracle.onrender.com
      - key: WEEKLY_SCHEDULER_URL
        value: https://weekly-scheduler.onrender.com
      - key: VISCERAL_INTELLIGENCE_URL
        value: https://visceral-intelligence.onrender.com
      - key: REALITY_VALIDATOR_URL
        value: https://reality-validator.onrender.com
      - key: PREDICTIVE_ANALYTICS_URL
        value: https://predictive-analytics.onrender.com
      - key: EMBEDDING_ENGINE_URL
        value: https://embedding-engine.onrender.com
      - key: DATABASE_MANAGER_URL
        value: https://database-manager.onrender.com
    healthCheckPath: /health
    rootDir: services/monitoring-dashboard
    autoDeploy: true
    branch: main
    region: oregon
    maxShutdownDelaySeconds: 30
    numInstances: 1

# Database Configuration
databases:
  - name: raw-capture-db
    databaseName: raw_capture_db
    user: raw_capture_db_user
    plan: starter
    region: oregon
    ipAllowList: []

# Redis Configuration
redis:
  - name: domain-runner-redis
    plan: starter
    region: oregon
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []
    # Ensure Redis is deployed and available for caching
    # Connection timeout and retry settings handled by client applications